------------
Introduction
------------

The modding communities for games using id Tech engines (Quake, Doom, etc) have
created a wealth of 3D models that are readily available on the internet. Many
of these models could be useful for game development projects using Ogre, but
since Ogre has its own custom mesh format, it cannot directly load any Quake or
Doom models.

For this reason, I present to you the Quake To Ogre Mesh Converter.
This tool can take a 3D model from either Quake 2, Quake 3 or Doom 3 and 
convert it to an equivalent Ogre mesh, including (a selection of) the original
model's animations.

--------
Features
--------

- Convert MD2, MD3 or MD5 model files to Ogre Mesh XML
- Convert Quake's vertex animations to Ogre's morph animations
- Convert Doom 3's skeletal animations to Ogre's skeletal animations
- Specify a selection of animations to convert (all input formats), or load
  them from a player model's animation file (MD3 only)
- Convert vertices and normals from Quake's coordinate system to Ogre's system
- Specify material names for each submesh

---------
Compiling
---------

The program should compile on pretty much any platform, but it has been tested
only on Windows and GNU/Linux. The only requirements are a decent C++ compiler
and the standard C math library.

For Windows users, I've included a Visual C++ .NET 2005 (VC8) project file.
The program can be compiled directly from that.

For GNU/Linux, a Makefile has been included that uses 'g++' for compilation.
To compile the code, just run "make" from the command line. The compiled binary
will be placed in the 'out' directory.

For users of other platforms or IDEs, simply creating a new project and adding
all source files should be enough.

-----
Usage
-----

The program is run from the command line as follows:

QuakeToOgre [config file]

With 'config file' being the name of a valid configuration XML file (more on
that later). The resulting mesh XML file can be converted to a binary Ogre mesh
using the standard 'OgreXmlConverter' tool, with the usual options (generate 
edge lists, compute tangent vectors, etc).

To aid in configuration, it is also possible to print some basic information
about a Quake mesh by running the program as follows:

QuakeToOgre -i [mesh file]

This will list the names of every frame, submesh, joint, tag and shader
contained in the mesh file.

-------------
Configuration
-------------

The configuration file is an XML document containing conversion parameters as
defined by the Document Type Definition in the 'config.dtd' file. Most of the
specification from the DTD file should be pretty self-explanatory, and two
example configuration files have been supplied to show you how to write a 
config XML file. There are a couple of specific details I will explain here
though:

- convertcoordinates
The Quake engines use a different coordinate system than Ogre uses. When this
tag is specified, every vertex and normal vector is converted from Quake's
coordinate system to Ogre's. This is useful when you want to use Quake assets
in a game that is otherwise filled with Ogre assets. If you're combining Quake
models with other Quake assets (e.g. you're using Quake 3 maps through the
BspSceneManager), then you will want to omit this tag.

- animationfile
Every Quake 3 player model has a text file containing the specification of
every animation. This file is usually called 'animation.cfg' and can be found
in the same directory as the player model's mesh and texture files. When 
converting MD3 meshes, one of these animation files can be loaded to specify a
series of animations. The names of these animations are fixed to be the same as
the names given in the animation file's comments.
Using either the 'convertlegs' or the 'converttorso' child tag, the full set of
animations for respectively the legs or the torso mesh can be converted. If the
'convertselection' tag is used instead, a specific selection of animations to
convert can be supplied.

- materials
Most (but not all) Quake models contain references to the materials (or shaders
in Quake terminology) they use. In many cases, these shader names will not be
correct for whatever Ogre project you're working on. To fix this, you have the
option to specify new material names for each submesh.
One important thing to note here is that this option only affects the
references to materials in the resulting Ogre mesh. You still have to write the
material scripts yourself.

--------------
Known problems
--------------

Ogre does not support interpolation of normals for morph animated meshes.
Consequently, converted MD2 and MD3 models can only have one single set of
normals, namely those taken from the reference frame. With extensively animated
meshes (such as player models) this means that the normals will be incorrect
for most frames, resulting in weird lighting behaviour.

---------
Licensing
---------

All original source code for this application is licensed under the MIT 
License, as described in the LICENSE file. Third-party source code is licensed
under a variety of licenses, which are described at the start of each source
file.

--------------
Special thanks
--------------

- The OGRE team, for creating such an incredibly powerful and clever, yet easy
  to use graphics engine.
- The OGRE community, for motivating me to keep working on this project.
- Lee Thomason, Yves Berquin and Andrew Ellerton, for creating the delightfully
  simple and lightweight TinyXML library.
- David Henry, for saving me the trouble of having to write an MD5 parser and
  processor myself.
